// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tunnel.proto

package kube_tunnel

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogLevel int32

const (
	LogLevel_INFO    LogLevel = 0
	LogLevel_VERBOSE LogLevel = 1
	LogLevel_DEBUG   LogLevel = 2
	LogLevel_WARNING LogLevel = 3
	LogLevel_ERROR   LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "INFO",
	1: "VERBOSE",
	2: "DEBUG",
	3: "WARNING",
	4: "ERROR",
}

var LogLevel_value = map[string]int32{
	"INFO":    0,
	"VERBOSE": 1,
	"DEBUG":   2,
	"WARNING": 3,
	"ERROR":   4,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{0}
}

type TunnelScheme int32

const (
	TunnelScheme_TCP       TunnelScheme = 0
	TunnelScheme_UDP       TunnelScheme = 1
	TunnelScheme_WEBSOCKET TunnelScheme = 2
)

var TunnelScheme_name = map[int32]string{
	0: "TCP",
	1: "UDP",
	2: "WEBSOCKET",
}

var TunnelScheme_value = map[string]int32{
	"TCP":       0,
	"UDP":       1,
	"WEBSOCKET": 2,
}

func (x TunnelScheme) String() string {
	return proto.EnumName(TunnelScheme_name, int32(x))
}

func (TunnelScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{1}
}

type LogMessage struct {
	LogLevel             LogLevel `protobuf:"varint,1,opt,name=logLevel,proto3,enum=grpc_tunnel.LogLevel" json:"logLevel,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{0}
}

func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessage.Unmarshal(m, b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return xxx_messageInfo_LogMessage.Size(m)
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_INFO
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SocketDataRequest struct {
	Port                 int32        `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	RequestId            string       `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	LogLevel             LogLevel     `protobuf:"varint,3,opt,name=logLevel,proto3,enum=grpc_tunnel.LogLevel" json:"logLevel,omitempty"`
	Scheme               TunnelScheme `protobuf:"varint,4,opt,name=scheme,proto3,enum=grpc_tunnel.TunnelScheme" json:"scheme,omitempty"`
	Data                 []byte       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	ShouldClose          bool         `protobuf:"varint,6,opt,name=shouldClose,proto3" json:"shouldClose,omitempty"`
	MessageType          int32        `protobuf:"varint,7,opt,name=messageType,proto3" json:"messageType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SocketDataRequest) Reset()         { *m = SocketDataRequest{} }
func (m *SocketDataRequest) String() string { return proto.CompactTextString(m) }
func (*SocketDataRequest) ProtoMessage()    {}
func (*SocketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{1}
}

func (m *SocketDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketDataRequest.Unmarshal(m, b)
}
func (m *SocketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketDataRequest.Marshal(b, m, deterministic)
}
func (m *SocketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataRequest.Merge(m, src)
}
func (m *SocketDataRequest) XXX_Size() int {
	return xxx_messageInfo_SocketDataRequest.Size(m)
}
func (m *SocketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataRequest proto.InternalMessageInfo

func (m *SocketDataRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SocketDataRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SocketDataRequest) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_INFO
}

func (m *SocketDataRequest) GetScheme() TunnelScheme {
	if m != nil {
		return m.Scheme
	}
	return TunnelScheme_TCP
}

func (m *SocketDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SocketDataRequest) GetShouldClose() bool {
	if m != nil {
		return m.ShouldClose
	}
	return false
}

func (m *SocketDataRequest) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

type SocketDataResponse struct {
	HasErr               bool        `protobuf:"varint,1,opt,name=hasErr,proto3" json:"hasErr,omitempty"`
	LogMessage           *LogMessage `protobuf:"bytes,2,opt,name=logMessage,proto3" json:"logMessage,omitempty"`
	RequestId            string      `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data                 []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	ShouldClose          bool        `protobuf:"varint,5,opt,name=shouldClose,proto3" json:"shouldClose,omitempty"`
	MessageType          int32       `protobuf:"varint,6,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Path                 string      `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SocketDataResponse) Reset()         { *m = SocketDataResponse{} }
func (m *SocketDataResponse) String() string { return proto.CompactTextString(m) }
func (*SocketDataResponse) ProtoMessage()    {}
func (*SocketDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{2}
}

func (m *SocketDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketDataResponse.Unmarshal(m, b)
}
func (m *SocketDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketDataResponse.Marshal(b, m, deterministic)
}
func (m *SocketDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataResponse.Merge(m, src)
}
func (m *SocketDataResponse) XXX_Size() int {
	return xxx_messageInfo_SocketDataResponse.Size(m)
}
func (m *SocketDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataResponse proto.InternalMessageInfo

func (m *SocketDataResponse) GetHasErr() bool {
	if m != nil {
		return m.HasErr
	}
	return false
}

func (m *SocketDataResponse) GetLogMessage() *LogMessage {
	if m != nil {
		return m.LogMessage
	}
	return nil
}

func (m *SocketDataResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SocketDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SocketDataResponse) GetShouldClose() bool {
	if m != nil {
		return m.ShouldClose
	}
	return false
}

func (m *SocketDataResponse) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *SocketDataResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterEnum("grpc_tunnel.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("grpc_tunnel.TunnelScheme", TunnelScheme_name, TunnelScheme_value)
	proto.RegisterType((*LogMessage)(nil), "grpc_tunnel.LogMessage")
	proto.RegisterType((*SocketDataRequest)(nil), "grpc_tunnel.SocketDataRequest")
	proto.RegisterType((*SocketDataResponse)(nil), "grpc_tunnel.SocketDataResponse")
}

func init() { proto.RegisterFile("tunnel.proto", fileDescriptor_6f51ddaa7891a711) }

var fileDescriptor_6f51ddaa7891a711 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x8e, 0xd2, 0x40,
	0x14, 0x65, 0xa0, 0x94, 0x72, 0xcb, 0x9a, 0xf1, 0x26, 0xea, 0x68, 0x8c, 0x36, 0x3c, 0x35, 0xfb,
	0x80, 0x2e, 0x3e, 0xf8, 0x2c, 0x50, 0x37, 0x44, 0x84, 0xcd, 0x94, 0x75, 0xa3, 0x89, 0x31, 0x5d,
	0x98, 0x80, 0xd9, 0x2e, 0x53, 0x3b, 0x83, 0x89, 0xcf, 0x7e, 0xb0, 0xbf, 0x60, 0x3a, 0x1d, 0xd6,
	0xb2, 0x1b, 0xe2, 0x3e, 0xf5, 0xce, 0xb9, 0xe7, 0x4e, 0xef, 0x39, 0xa7, 0x85, 0x8e, 0xde, 0x6e,
	0x36, 0x22, 0xed, 0x65, 0xb9, 0xd4, 0x12, 0xfd, 0x55, 0x9e, 0x2d, 0xbe, 0x95, 0x50, 0xf7, 0x33,
	0xc0, 0x44, 0xae, 0x3e, 0x0a, 0xa5, 0x92, 0x95, 0xc0, 0x13, 0xf0, 0x52, 0xb9, 0x9a, 0x88, 0x9f,
	0x22, 0x65, 0x24, 0x20, 0xe1, 0x83, 0xfe, 0xa3, 0x5e, 0x85, 0xdd, 0x9b, 0xd8, 0x26, 0xbf, 0xa1,
	0x21, 0x83, 0xd6, 0x75, 0x39, 0xcd, 0xea, 0x01, 0x09, 0xdb, 0x7c, 0x77, 0xec, 0xfe, 0xae, 0xc3,
	0xc3, 0x58, 0x2e, 0xae, 0x84, 0x1e, 0x25, 0x3a, 0xe1, 0xe2, 0xc7, 0x56, 0x28, 0x8d, 0x08, 0x4e,
	0x26, 0x73, 0x6d, 0xae, 0x6f, 0x72, 0x53, 0xe3, 0x73, 0x68, 0xe7, 0x65, 0x7b, 0xbc, 0xb4, 0xb7,
	0xfc, 0x03, 0xf6, 0x96, 0x6a, 0xdc, 0x6f, 0xa9, 0x13, 0x70, 0xd5, 0x62, 0x2d, 0xae, 0x05, 0x73,
	0xcc, 0xc0, 0xd3, 0xbd, 0x81, 0xb9, 0x79, 0xc4, 0x86, 0xc0, 0x2d, 0xb1, 0xd8, 0x6b, 0x99, 0xe8,
	0x84, 0x35, 0x03, 0x12, 0x76, 0xb8, 0xa9, 0x31, 0x00, 0x5f, 0xad, 0xe5, 0x36, 0x5d, 0x0e, 0x53,
	0xa9, 0x04, 0x73, 0x03, 0x12, 0x7a, 0xbc, 0x0a, 0x15, 0x0c, 0x2b, 0x77, 0xfe, 0x2b, 0x13, 0xac,
	0x65, 0x44, 0x55, 0xa1, 0xee, 0x1f, 0x02, 0x58, 0x75, 0x41, 0x65, 0x72, 0xa3, 0x04, 0x3e, 0x06,
	0x77, 0x9d, 0xa8, 0x28, 0xcf, 0x8d, 0x11, 0x1e, 0xb7, 0x27, 0x7c, 0x0b, 0x90, 0xde, 0xe4, 0x61,
	0xbc, 0xf0, 0xfb, 0x4f, 0x6e, 0xcb, 0xb5, 0x6d, 0x5e, 0xa1, 0xee, 0x7b, 0xd8, 0xb8, 0xed, 0xe1,
	0x4e, 0x9d, 0x73, 0x58, 0x5d, 0xf3, 0xbf, 0xea, 0xdc, 0x3b, 0xea, 0x4c, 0x9a, 0x89, 0x5e, 0x33,
	0xcf, 0xbc, 0xd0, 0xd4, 0xc7, 0x23, 0xf0, 0x76, 0x91, 0xa0, 0x07, 0xce, 0x78, 0xfa, 0x7e, 0x46,
	0x6b, 0xe8, 0x43, 0xeb, 0x53, 0xc4, 0x07, 0xb3, 0x38, 0xa2, 0x04, 0xdb, 0xd0, 0x1c, 0x45, 0x83,
	0xf3, 0x53, 0x5a, 0x2f, 0xf0, 0x8b, 0x77, 0x7c, 0x3a, 0x9e, 0x9e, 0xd2, 0x46, 0x81, 0x47, 0x9c,
	0xcf, 0x38, 0x75, 0x8e, 0x5f, 0x41, 0xa7, 0x9a, 0x13, 0xb6, 0xa0, 0x31, 0x1f, 0x9e, 0xd1, 0x5a,
	0x51, 0x9c, 0x8f, 0xce, 0x28, 0xc1, 0x23, 0x68, 0x5f, 0x44, 0x83, 0x78, 0x36, 0xfc, 0x10, 0xcd,
	0x69, 0xbd, 0xff, 0x15, 0xdc, 0x72, 0x00, 0x63, 0x80, 0xf1, 0xe6, 0xbb, 0xb6, 0xa7, 0x17, 0x7b,
	0xee, 0xdd, 0xf9, 0x20, 0x9f, 0xbd, 0x3c, 0xd8, 0x2f, 0xa3, 0xea, 0xd6, 0x42, 0xf2, 0x9a, 0x0c,
	0x8e, 0xbe, 0xf8, 0x57, 0xdb, 0x4b, 0x61, 0x79, 0x97, 0xae, 0xf9, 0x97, 0xde, 0xfc, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x5f, 0x9b, 0x45, 0x5b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelClient interface {
	InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error)
}

type tunnelClient struct {
	cc *grpc.ClientConn
}

func NewTunnelClient(cc *grpc.ClientConn) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tunnel_serviceDesc.Streams[0], "/grpc_tunnel.Tunnel/InitTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelInitTunnelClient{stream}
	return x, nil
}

type Tunnel_InitTunnelClient interface {
	Send(*SocketDataRequest) error
	Recv() (*SocketDataResponse, error)
	grpc.ClientStream
}

type tunnelInitTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelInitTunnelClient) Send(m *SocketDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelInitTunnelClient) Recv() (*SocketDataResponse, error) {
	m := new(SocketDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
type TunnelServer interface {
	InitTunnel(Tunnel_InitTunnelServer) error
}

// UnimplementedTunnelServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (*UnimplementedTunnelServer) InitTunnel(srv Tunnel_InitTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method InitTunnel not implemented")
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_InitTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).InitTunnel(&tunnelInitTunnelServer{stream})
}

type Tunnel_InitTunnelServer interface {
	Send(*SocketDataResponse) error
	Recv() (*SocketDataRequest, error)
	grpc.ServerStream
}

type tunnelInitTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelInitTunnelServer) Send(m *SocketDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelInitTunnelServer) Recv() (*SocketDataRequest, error) {
	m := new(SocketDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_tunnel.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitTunnel",
			Handler:       _Tunnel_InitTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
